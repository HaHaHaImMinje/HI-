<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model ① This is "HandlerMapping 
		& HandlerAdapter" role. ② component-scan을 통해서 스캔된 bean중에서 해당 요청과 알맞는 Controller를 
		찾아서 연결!! -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory ${webappRoot}/resources 
		디렉토리에서 정적 리소스를 효율적으로 제공하여 /resources/**에 대한 HTTP GET 요청을 처리합니다. -->
	<resources mapping="/resources/**" location="/resources/" />
	<!-- 아래의 코드로 boardMVC 이미지가 먹힐 수 있다. -->
	<resources mapping="/boardMVC/**" location="/boardMVC/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- <beans:property name="prefix" value="/WEB-INF/views/" /> --> <!-- 접두사 사이에 parklist 가 있다. -->
		<beans:property name="prefix" value="/" /> <!-- 이게 접두사 -->
		<beans:property name="suffix" value=".jsp" /><!-- 접미사 -->
	</beans:bean>

	<!-- DBMS : Oracle database info -->
	<beans:bean id="database"
		class="org.apache.commons.dbcp.BasicDataSource">
		<beans:property name="driverClassName"
			value="oracle.jdbc.OracleDriver" />
		<beans:property name="url"
			value="jdbc:oracle:thin:@localhost:1521:orcl" />
		<beans:property name="username" value="C##APPLE" />
		<beans:property name="password" value="1234" />
	</beans:bean>

	<beans:bean id="logds"
		class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<beans:constructor-arg ref="database"></beans:constructor-arg>
		<beans:property name="logFormatter">
			<beans:bean
				class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
				<beans:property name="loggingType" value="MULTI_LINE"></beans:property>
				<beans:property name="sqlPrefix"
					value="Message
              :"></beans:property>
			</beans:bean>
		</beans:property>
	</beans:bean>
	<beans:bean id="transactionManger"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="logds">
	</beans:bean>

	<tx:annotation-driven
		transaction-manager="transactionManger" />
	<tx:advice id="txAdvice"
		transaction-manager="transactionManger">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" /><!--REQUIRED Method를 
				진행 할 때 transaction이 필요하다. -->
			<!-- <tx:method name="*update" propagation="NEVER"/> --><!--update를 할때 transaction이 필요없다. -->
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(public * sist.com.dao.*.*(..))" />
	</aop:config>

	<!-- DBMS : factory pattern -->
	<beans:bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="logds" />
		<beans:property name="configLocation"
			value="/WEB-INF/Config.xml" />
	</beans:bean>

	<!-- DBMS : mybatis instance : di of factory pattern -->
	<beans:bean id="sqlSessionTemplate"
		class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg>
			<beans:ref bean="sqlSessionFactory" />
		</beans:constructor-arg>
	</beans:bean>

	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="defaultEncoding" value="UTF-8"></beans:property>
		<beans:property name="maxUploadSize" value="300000000"></beans:property>
	</beans:bean>
	<beans:bean id="IncepterPro" class="sist.com.vo.IncepterPro" scope="singleton"/>
	
	
	<beans:bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
	  <beans:property name="basenames">
	     <beans:list>
	       <beans:value>WEB-INF/validate</beans:value>
	       <beans:value>WEB-INF/si</beans:value>
	     </beans:list>
	  </beans:property>
	  <beans:property name="defaultEncoding" value="UTF-8"></beans:property>
	</beans:bean>
	
	
	<!-- 인터셉터 -->
	<interceptors>
		<interceptor>
			<mapping path="/interLogin.do"/>
			<beans:ref bean = "incepterPro"/>
		</interceptor>
	</interceptors>


	<aop:aspectj-autoproxy />
	<!-- 해당 위치의 어노테이션을 읽어들여서 bean으로 등록! -->
	<context:component-scan	base-package="sist.com.web" />
	<context:component-scan	base-package="sist.com.di.basic6" />
	<context:component-scan	base-package="sist.com.controller" />
	<context:component-scan	base-package="sist.com.dao" />
	<context:component-scan	base-package="sist.com.aop" /> <!-- aop안에 있는 모든것들을 = 컴포넌트 스캔을 하겠다. -->
	<context:component-scan base-package="sist.com.vo" />

</beans:beans>
